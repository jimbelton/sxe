#! /usr/bin/perl
#
# This script analyzes sxe log output looking for allocations not being freed.
# These messages can be enabled setting the global variable sxe_alloc_diagnostics to true.
#
# Usage:
# -n   Prepend line numbers for unmatched allocs/frees
# -s   Detailed statistics
# -v   Verbose output for every alloc/free

use strict;
use warnings;
use Getopt::Std;

my %opts;
getopts('nvs', \%opts);

my %mem; # Each item is a hash of {size, line}
my %filestats; # Each item is a hash of {alloc,  allocsz, free, freesz}

sub filestats_new {
    my $file = $1;
    if (not exists $filestats{$file}) {
        $filestats{$file}{alloc} = 0;
        $filestats{$file}{allocsz} = 0;
        $filestats{$file}{free} = 0;
        $filestats{$file}{freesz} = 0;
    }
}

sub set_address {
    my ($address, $line_number, $line, $size) = @_;
    $mem{$address}{size} = $size;
    $mem{$address}{line_number} = $line_number;
    $mem{$address}{line} = $line;
}

for (my $line_number = 1; my $line = <>; $line_number++) {
    if ($line =~ m{- ([^: ]+): (?:\d+): (?:0x([\da-f]+) = )?sxe_(free|realloc)\(0x([\da-f]+)[,)]}) {
        # This is a free or realloc, lines look like this:
        # 20210407 222641.139 T     26807 ------ 6     - conf.c: 670: 0x7f8b60416080 = sxe_realloc(0x7f8b60416080, 88)
        # 20210407 222641.139 T     26807 ------ 6       - conf.c: 785: sxe_free(0x7f8b69c17180)
        my ($file, $op, $address, $new) = ($1, $3, $4, $2 // "NA");

        if ($address ne $new) {
            # free or realloc that changed the address
            if (exists $mem{$address}) {

                print "FREE: file:$file op:$op address:$address new:$new size:$mem{$address}{size} line:$line" if $opts{v};

                filestats_new($file) if not exists $filestats{$file};
                $filestats{$file}{free}++;
                $filestats{$file}{freesz} += $mem{$address}{size};

                delete $mem{$address};
            } else {
                print "*** Unmatched free on 0x$address: " . ($opts{'n'} ? "$line_number:" : "") . "$line";
            }
        }
    }

    if ($line =~ m{- ([^: ]+): (?:\d+): 0x([\da-f]+) = sxe_((?:m|c|re)alloc|strdup)\((?:0x([\da-f]+)|\(nil\))?(?:, |\[)?(\d+)}) {
        # This is an alloc, realloc, or strdup, lines look like this:
        # 20210407 222641.037 T     26795 ------ 6     - conf.c: 119: 0x7f8b69c17180 = sxe_realloc((nil), 88)
        # 20210407 222641.037 T     26795 ------ 6     - conf.c: 670: 0x7f8b69c17180 = sxe_realloc(0x7f8b69c17180, 88)
        # 20210407 222641.037 T     26795 ------ 6   - http-server.c: 284: 0x7f8b69c14140 = sxe_malloc(16)
        # 20210407 222641.148 T     26803 ------ 6     - latitude-check.c: 432: 0x7f8b6021c200 = sxe_strdup(0x7f8b6021c100[175])
        my ($file, $op, $address, $old, $size) = ($1, $3, $2, $4 // "NA", $5);

        if ($address ne $old) {
            # alloc or realloc that changed the address
            print "ALLOC: file:$file op:$op address:$address old:$old size:$size line:$line" if $opts{v};

            filestats_new($file) if not exists $filestats{$file};
            $filestats{$file}{alloc}++;
            $filestats{$file}{allocsz} += $size;

            print "*** Repeat $op returning 0x$address: $line" if (exists $mem{$address});

            set_address($address, $line_number, $line, $size);
        } else {
            # Should only occur for a realloc that has already been seen
            if ($op ne "realloc") {
                print "ERROR: not realloc: $line";
            } elsif (not exists $mem{$address}) {
                print "ERROR: no previous alloc: $line";
            } elsif ($mem{$address}{size} != $size) {
                # This was a size-changing realloc, adjust the stats
                print "REALLOC: file:$file op:$op address:$address old:$old size:$size oldsize:$mem{$address}{size} line:$line" if $opts{v};

                if ($size > $mem{$address}{size}) {
                    $filestats{$file}{allocsz} += $size - $mem{$address}{size};
                } else {
                    $filestats{$file}{freesz} += $mem{$address}{size} - $size;
                }

                set_address($address, $line_number, $line, $size);
            }
        }
    }
}

if ($opts{s}) {
    print "File counts:\n";
    my ($alloc, $allocsz, $free, $freesz);
    foreach my $key (keys %filestats) {
        print "  $key - alloc:$filestats{$key}{alloc} allocsz:$filestats{$key}{allocsz} free:$filestats{$key}{free} freesz:$filestats{$key}{freesz}\n";
        $alloc += $filestats{$key}{alloc};
        $allocsz += $filestats{$key}{allocsz};
        $free += $filestats{$key}{free};
        $freesz += $filestats{$key}{freesz};
    }
    print "Totals - alloc:$alloc allocsz:$allocsz free:$free freesz:$freesz\n";
    print "Diffs - count:" . ($alloc - $free) . " size:" . ($allocsz - $freesz) . "\n\n";
}

print "Unmatched allocs:\n" if (%mem);
foreach my $address (sort {$mem{$a}{line_number} cmp $mem{$b}{line_number}} keys %mem) {
    print "  " . ($opts{'n'} ? "$mem{$address}{line_number}:" : "") . " $mem{$address}{line}";
}

print "sxe-alloc debug logging may not be enabled\n" if not %filestats;
